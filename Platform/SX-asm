#! /bin/bash
# Function:
#  For -S assembler output, allow SX compilation to handle a terminal -o <dest> option
#  similar to most other compilers.
#
# Arguments: Full sxcc or sxc++ command of following form:
#            {cmd [options...]} -S {filenames...} -o {dest}
#
# Output: A {dest} file containing SX assembler outputs for .c|.cc|.cpp|.cxx filenames
#
# Details:
# - unlike most other compilers, sxcc does not accept -o option for -S (assembler output)
# - we handle commands like sxcc ... -S <filenames> -o <dest>
# - parse and remove the -o <dest> option
# - convert <filenames> to the ".s" default sx output filenames
# - remove duplicate sx output filenames (for safety, if headers might be there)
# - pipe command output into a tmpfile
# - cat the default sx output filenames to the tmpfile (no err if missing)
# - [opt.] rm the default sx output files
# - move the tmpfile to the desired "-o <dest>" location
#
# TODO: /bin/sh version of this script ?
# TODO: remove any -g option (gives error with -S)
#
nargs=$#
dohelp=0
# For detailed debug, set ECHO=echo for sections that present difficulty
#   true always succeeds, and ignores any args
ECHO=true
#ECHO=echo
${ECHO} "No. args = $#"
if [ $nargs -gt 2 ]; then
	#
	# find position of "-S" argument and "-o" optional final arg
	dest=""
	Dpos=-1
	Spos=-1
	cmd=()
	files=()
	ocnt=0
	for opt in ${@}; do
		${ECHO} "opt ${opt}, ocnt=${ocnt}, pcnt=${pcnt}, Spos=${Spos}"
		#
		# When we find warnings like
		#   sxcc: Warning: "-S" is ignored.
		# Then one possibility is to remove them HERE ...
		#
		if false; then :;
		elif [ "${opt}" == "-g" ]; then ${ECHO} "ignoring -g";
		elif [ "${opt}" == "-Cdebug" ]; then ${ECHO} "ignoring -Cdebug";
		elif [ $Spos -lt 0 -a "${opt}" == "-S" ]; then Spos=${ocnt};  ${ECHO} "**Spos**${Spos}";
		elif [ $Spos -lt 0 ]; then cmd[${#cmd}]="${opt}"; ${ECHO} "cmd->${cmd[@]}";
		elif [ $Dpos -lt 0 -a "${opt}" == "-o" ]; then Dpos=${ocnt}; ${ECHO} "**Dpos**${Dpos}";
		elif [ $Dpos -lt 0 ]; then files[${#files}]="${opt}"; ${ECHO} "files->${files[@]}";
		elif [ "${dest}" == "" ]; then dest="${opt}";
		else dohelp=1; echo "OHOH: only supports a single [-o <dest>]"; break;
		fi
		ocnt=$((ocnt + 1))
	done
	${ECHO} "Spos=${Spos}"
	${ECHO} "Dpos=${Spos}"
	${ECHO} " cmd=<${cmd[@]}>"
	${ECHO} " files=<${files[@]}>"
	${ECHO} " dest=<${dest}>"
else
	dohelp=1
fi
ECHO=true
#ECHO=echo
if [ $dohelp -eq 0 ]; then
	if [ ${#cmd} -le 0 ]; then
		echo "Error parsing cmd portion of <cmd> -S <files> [-o <dest>]";
		dohelp=1
	fi
	if [ $Spos -lt 0 -o ${#files} -le 0 ]; then
		echo "Error parsing files portion of <cmd> -S <files>[-o <dest>]";
		dohelp=1
	fi
	if [ $Dpos -ge 0 -a "${dest}" == "" ]; then
		echo "Error parsing dest portion of <cmd> -S <files> [-o <dest>]";
		dohelp=1
	fi
fi
sfiles=()
ECHO=true
#ECHO=echo
if [ $dohelp -eq 0 ]; then
	for ifile in ${files[@]}; do
		#sfile=`echo "${ifile}" | sed -e 's/\(.c$\)/.s/'`
		sfile=`echo "${ifile}" | sed -e 's/\(.c$\)\|\(.cc$\)\|\(.cxx$\)\|\(.cpp$\)/.s/'`
		${ECHO} "ifile $ifile --> sfile $sfile --> ${sfile%[.]s}"
		if [ "${sfile%[.]s}" != "${sfile}" ]; then
			sfiles[${#sfiles}]="${sfile}";
		fi
	done
	${ECHO} "sfiles : ${sfiles[@]}"
fi
ECHO=true
#ECHO=echo
if [ $dohelp -eq 0 ]; then
	compile_err=0 
	tmpfile=/tmp/${files[0]}.SX-asm
	${cmd[@]} -S ${files[@]} >& "${tmpfile}"
	compile_err=$?
	if [ $compile_err -eq 0 ]; then
		# Treat this warning as if it were an error
		if grep -q '"-S" is ignored' "${tmpfile}"; then
			echo "Error: compiler options were incompatible with assembler output"
			echo "  Cmd: ${cmd[@]}"
			echo "       Please find and add the incompatible options to Platform/SX-asm"
			compile_err=1
		fi
	fi
	outputs="outputs"
	if [ $compile_err -eq 0 ]; then
		# append all the .s files we think should be produced
		for s in ${sfiles[@]}; do
			if [ -f "${s}" ]; then
				${ECHO} "cat ${s} >> ${tmpfile}";
				{ echo ""; echo "--->>> SX assembly output ${s}"; echo "";
				cat "${s}"; } >> "${tmpfile}";
				#rm "${s}"
			else
				echo "Ohoh: did not find ${sfile}";
			fi
		done
	else
		outputs="error outputs"
		echo ""
		echo "SX-asm Command:"
		echo "    ${cmd[@]} -S ${files[@]} >& ${tmpfile}"       
		echo "SX-asm error: compilation issues"
	fi
	if [ "${dest}" != "" ]; then
		if [ "${ECHO}" != "true" ]; \
		then mv -v "${tmpfile}" "${dest}"; \
		else mv    "${tmpfile}" "${dest}"; fi
		if [ $? -eq 0 ]; \
		then echo "SX-asm: ${outputs} for ${sfiles[@]} --> ${dest}"; \
		else echo "SX-asm: ${outputs} for ${sfiles[@]} --> ${tmpfile}"; fi
	else
		if [ $compile_err -eq 0 ]; \
		then echo "SX-asm: [no -o <dest>] ${outputs}: ${sfiles[@]}"; \
		else echo "SX-asm: [no -o <dest>] ${outputs}: ${tmpfile}"; cat "${tmpfile}"; fi # likely a short-ish error output?
	fi
fi
if [ $dohelp -ne 0 ]; then
	echo "SX-asm <cmd> [opts] -S <files> [-o <dest>] -- Need more arguments"
	false
fi
true
#opt=$1; shift
#file=$1; shift
#
#(echo $opt; echo $file; echo $*) > /tmp/log
#sxc++ -prelink -Wl,-M $*
#sxar $opt $file $*
