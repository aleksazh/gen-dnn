/*******************************************************************************
* Copyright 2019 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

#ifndef DNNL_CONFIG_H
#define DNNL_CONFIG_H

#include "dnnl_types.h"

/// @cond DO_NOT_DOCUMENT_THIS

// All symbols shall be internal unless marked as DNNL_API
#if defined _WIN32 || defined __CYGWIN__
#define DNNL_HELPER_DLL_IMPORT __declspec(dllimport)
#define DNNL_HELPER_DLL_EXPORT __declspec(dllexport)
#else
#if __GNUC__ >= 4
#define DNNL_HELPER_DLL_IMPORT __attribute__((visibility("default")))
#define DNNL_HELPER_DLL_EXPORT __attribute__((visibility("default")))
#else
#define DNNL_HELPER_DLL_IMPORT
#define DNNL_HELPER_DLL_EXPORT
#endif
#endif

#ifdef DNNL_DLL
#ifdef DNNL_DLL_EXPORTS
#define DNNL_API DNNL_HELPER_DLL_EXPORT
#else
#define DNNL_API DNNL_HELPER_DLL_IMPORT
#endif
#else
#define DNNL_API
#endif

#if defined(__GNUC__)
#define DNNL_DEPRECATED __attribute__((deprecated))
#elif defined(_MSC_VER)
#define DNNL_DEPRECATED __declspec(deprecated)
#else
#define DNNL_DEPRECATED
#endif

/// @endcond

// clang-format off

// DNNL CPU threading runtime
#cmakedefine DNNL_CPU_THREADING_RUNTIME DNNL_RUNTIME_${DNNL_CPU_THREADING_RUNTIME}

// DNNL CPU engine runtime
#cmakedefine DNNL_CPU_RUNTIME DNNL_RUNTIME_${DNNL_CPU_RUNTIME}

// DNNL GPU engine runtime
#cmakedefine DNNL_GPU_RUNTIME DNNL_RUNTIME_${DNNL_GPU_RUNTIME}

// Here is how cmake can communicate target and jit support level..............
#define DNNL_CPU_X86 0
#define DNNL_CPU_VE  1
#define DNNL_CPU_SX  2 // deprecated, very old code (if any)
// Each cpu may have multiple levels of jit support
// XXX dnnl now has a DNNL_ENABLE_MAX_CPU_ISA cmake flag
//     and a dnnl_set_max_cpu_isa() function.
#define DNNL_JIT_ANY    (DNNL_CPU_X86*10 + 0)
#define DNNL_JIT_SSE41  (DNNL_CPU_X86*10 + 1)
#define DNNL_JIT_SSE42  (DNNL_CPU_X86*10 + 2)
#define DNNL_JIT_AVX    (DNNL_CPU_X86*10 + 3)
#define DNNL_JIT_AVX2   (DNNL_CPU_X86*10 + 4)
#define DNNL_JIT_AVX512 (DNNL_CPU_X86*10 + 5)
//
#define DNNL_JIT_VEANY  (DNNL_CPU_VE*10 + 0)
#define DNNL_JIT_VE     (DNNL_CPU_VE*10 + 1)
//
#define DNNL_JIT_SXANY  (DNNL_CPU_SX*10 + 0) /* deprecated, very old code (if any) */
//.............................................................................

// DNNL CPU engine jit level FIXME: VE should get a separate engine
#cmakedefine DNNL_CPU_JIT ${DNNL_JIT_SUPPORT}

// useful conditionals
#define DNNL_TARGET_VANILLA (DNNL_CPU_JIT%10 == 0)

#define DNNL_TARGET_X86     (DNNL_CPU_JIT/10 == DNNL_CPU_X86)
#define DNNL_TARGET_X86_JIT (DNNL_TARGET_X86 && DNNL_TARGET%10 > 0)

#define DNNL_TARGET_VE      (DNNL_CPU_JIT/10 == DNNL_CPU_VE)
#define DNNL_TARGET_VE_JIT  (DNNL_TARGET_X86 && DNNL_TARGET%10 > 0)

#define DNNL_TARGET_SX      (DNNL_CPU_JIT/10 == DNNL_CPU_SX) /* deprecated, very old code (if any) */
//.............................................................................

#if defined(__ve) && !DNNL_TARGET_VE
#error "VE compiler but DNNL_JIT_SUPPORT for a non-VE CPU"
#endif

// clang-format on

#if defined(DNNL_CPU_RUNTIME) && defined(DNNL_GPU_RUNTIME)
#if (DNNL_CPU_RUNTIME == DNNL_RUNTIME_NONE) \
        || (DNNL_CPU_RUNTIME == DNNL_RUNTIME_OCL)
#error "Unexpected DNNL_CPU_RUNTIME"
#endif
#if (DNNL_GPU_RUNTIME != DNNL_RUNTIME_NONE) \
        && (DNNL_GPU_RUNTIME != DNNL_RUNTIME_OCL)
#error "Unexpected DNNL_GPU_RUNTIME"
#endif
#else
#error "BOTH DNNL_CPU_RUNTIME and DNNL_GPU_RUNTIME must be defined"
#endif

// vim: et ts=4 sw=4 cindent cino=+2s,^=l0,\:0,N-s
#endif
