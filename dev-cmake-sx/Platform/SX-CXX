# vim: set sw=4 ts=4 et ft=cmakeBI_CO
if(SX_TRACE)
    message(STATUS " *** Platform/SX-CXX ***")
endif()
set(CMAKE_CXX_COMPILER_ID "SX")
set(CMAKE_CXX_PLATFORM_ID "SX")
SET(CMAKE_CXX_COMPILER sxc++)

# stop the normal id stuff from running
set(CMAKE_CXX_COMPILER_ID_RUN 1)

# stop normal abi detection -- Here is too early (trying Platform/SX)
#set(CMAKE_CXX_ABI_COMPILED 1)
##   ??? may need to hardwire things like ...
##set(ABI_SIZEOF_DPTR 8)
##set(ABI_SIZEOF_DATA_PTR 8)
##set(CMAKE_${lang}_IMPLICIT_LINK_LIBRARIES ...)
##set(CMAKE_${lang}_IMPLICIT_LINK_DIRECTORIES ...)
##set(CMAKE_${lang}_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES ...)
## ? CMAKE_LIBRARY_ARCHITECTURE_REGEX
## then CMakeDetermineCompileFeatures.cmake
##      CMakeCCompiler.cmake
#
## cmake-3.8 does this in Platform/SX-Initialize.
## *** cmake-3.0 does not automatically invoke Platform/SX-Initialize ***
##     short-circuit default settings in CMakeDetermineCCompiler.cmake (for CmakeFindBinUtils)
##set(_CMAKE_TOOLCHAIN_PREFIX "sx")
## give cmake a HINT location for toolchain location [in case it is not in current path?]
##set(CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN "/SX/usr")


#
# Then CMakeFindBinUtils
#
# Here are some things you can set up more correctly here
#
# They are actually set in CMakeCXXCompiler.cmake.in, so look there to
# be sure to set the correct @FOO@ substitution variables
#
# CMakeCXXCompiler.cmake(1):  set(CMAKE_CXX_COMPILER /SX/usr/bin/sxc++ )
# CMakeCXXCompiler.cmake(2):  set(CMAKE_CXX_COMPILER_ARG1  )
# CMakeCXXCompiler.cmake(3):  set(CMAKE_CXX_COMPILER_ID GNU )
# CMakeCXXCompiler.cmake(4):  set(CMAKE_CXX_COMPILER_VERSION 5.3.0 )
# CMakeCXXCompiler.cmake(5):  set(CMAKE_CXX_COMPILER_WRAPPER  )
# CMakeCXXCompiler.cmake(6):  set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT 14 )
  set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT 11 )
# CMakeCXXCompiler.cmake(7):  set(CMAKE_CXX_COMPILE_FEATURES  )
# CMakeCXXCompiler.cmake(8):  set(CMAKE_CXX98_COMPILE_FEATURES  )
# CMakeCXXCompiler.cmake(9):  set(CMAKE_CXX11_COMPILE_FEATURES  )
# CMakeCXXCompiler.cmake(10):  set(CMAKE_CXX14_COMPILE_FEATURES  )
# CMakeCXXCompiler.cmake(11):  set(CMAKE_CXX17_COMPILE_FEATURES  )
# CMakeCXXCompiler.cmake(13):  set(CMAKE_CXX_PLATFORM_ID  )
# CMakeCXXCompiler.cmake(14):  set(CMAKE_CXX_SIMULATE_ID  )
# CMakeCXXCompiler.cmake(15):  set(CMAKE_CXX_SIMULATE_VERSION  )
# CMakeCXXCompiler.cmake(17):  set(CMAKE_AR /home/4gi/nlabhpg/local/cmake-sample/ar )
# CMakeCXXCompiler.cmake(18):  set(CMAKE_RANLIB /home/4gi/nlabhpg/local/cmake-sample/ranlib )
# CMakeCXXCompiler.cmake(19):  set(CMAKE_LINKER /SX/usr/bin/sxld )
# CMakeCXXCompiler.cmake(20):  set(CMAKE_COMPILER_IS_GNUCXX 1 )
# CMakeCXXCompiler.cmake(21):  set(CMAKE_CXX_COMPILER_LOADED 1 )
# CMakeCXXCompiler.cmake(22):  set(CMAKE_CXX_COMPILER_WORKS )
# CMakeCXXCompiler.cmake(23):  set(CMAKE_CXX_ABI_COMPILED )
# CMakeCXXCompiler.cmake(24):  set(CMAKE_COMPILER_IS_MINGW )
# CMakeCXXCompiler.cmake(25):  set(CMAKE_COMPILER_IS_CYGWIN )
# CMakeCXXCompiler.cmake(26):  if(CMAKE_COMPILER_IS_CYGWIN )
# CMakeCXXCompiler.cmake(31):  set(CMAKE_CXX_COMPILER_ENV_VAR CXX )
# CMakeCXXCompiler.cmake(33):  if(CMAKE_COMPILER_IS_MINGW )
# CMakeCXXCompiler.cmake(36):  set(CMAKE_CXX_COMPILER_ID_RUN 1 )
# CMakeCXXCompiler.cmake(37):  set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC )
# CMakeCXXCompiler.cmake(38):  set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;mm;CPP )
# CMakeCXXCompiler.cmake(39):  set(CMAKE_CXX_LINKER_PREFERENCE 30 )
# CMakeCXXCompiler.cmake(40):  set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1 )
# CMakeCXXCompiler.cmake(43):  set(CMAKE_CXX_SIZEOF_DATA_PTR  )
# CMakeCXXCompiler.cmake(44):  set(CMAKE_CXX_COMPILER_ABI  )
# CMakeCXXCompiler.cmake(45):  set(CMAKE_CXX_LIBRARY_ARCHITECTURE  )
# CMakeCXXCompiler.cmake(47):  if(CMAKE_CXX_SIZEOF_DATA_PTR )
# CMakeCXXCompiler.cmake(51):  if(CMAKE_CXX_COMPILER_ABI )
# CMakeCXXCompiler.cmake(55):  if(CMAKE_CXX_LIBRARY_ARCHITECTURE )
# CMakeCXXCompiler.cmake(59):  set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX  )
# CMakeCXXCompiler.cmake(60):  if(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX )
# CMakeCXXCompiler.cmake(68):  set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES  )
# CMakeCXXCompiler.cmake(69):  set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES  )
# CMakeCXXCompiler.cmake(70):  set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES  )
