/*******************************************************************************
* Copyright 2019 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

#ifndef DNNL_CONFIG_H
#define DNNL_CONFIG_H

#include "dnnl_types.h"

/// @cond DO_NOT_DOCUMENT_THIS

// All symbols shall be internal unless marked as DNNL_API
#if defined _WIN32 || defined __CYGWIN__
#define DNNL_HELPER_DLL_IMPORT __declspec(dllimport)
#define DNNL_HELPER_DLL_EXPORT __declspec(dllexport)
#else
#if __GNUC__ >= 4
#define DNNL_HELPER_DLL_IMPORT __attribute__((visibility("default")))
#define DNNL_HELPER_DLL_EXPORT __attribute__((visibility("default")))
#else
#define DNNL_HELPER_DLL_IMPORT
#define DNNL_HELPER_DLL_EXPORT
#endif
#endif

#ifdef DNNL_DLL
#ifdef DNNL_DLL_EXPORTS
#define DNNL_API DNNL_HELPER_DLL_EXPORT
#else
#define DNNL_API DNNL_HELPER_DLL_IMPORT
#endif
#else
#define DNNL_API
#endif

#if defined(__GNUC__)
#define DNNL_DEPRECATED __attribute__((deprecated))
#elif defined(_MSC_VER)
#define DNNL_DEPRECATED __declspec(deprecated)
#else
#define DNNL_DEPRECATED
#endif

/// @endcond

// clang-format off

/// @defgroup cmake_build cmake build options
//@{
/// DNNL CPU threading runtime
#cmakedefine DNNL_CPU_THREADING_RUNTIME DNNL_RUNTIME_${DNNL_CPU_THREADING_RUNTIME}

/// DNNL CPU engine runtime
#cmakedefine DNNL_CPU_RUNTIME DNNL_RUNTIME_${DNNL_CPU_RUNTIME}

/// DNNL GPU engine runtime
#cmakedefine DNNL_GPU_RUNTIME DNNL_RUNTIME_${DNNL_GPU_RUNTIME}

/** @defgroup CPU_constants CPU targets*/
/// DNNL_CPU in \ref dnnl_config.h values correspond to CMAKE_SYSTEM_PROCESSOR.
//@{
/// DNNL CPU build target 1,2,etc = x86, ve, etc.
#cmakedefine DNNL_CPU ${DNNL_CPU}
///@}

/// @defgroup cpu_isa cmake options communicating cpu-specific build options
/// cpu target variants expand capability from VANILLA-->ANY-->(cpu-specific)-->ALL.
//@{
#cmakedefine DNNL_ISA ${DNNL_ISA_VALUE}
//@}
//@}

/// @defgroup cmake_build_constants cmake build constants
//@{ supported CPUs
#cmakedefine DNNL_CPU_X86 ${DNNL_CPU_X86}
#cmakedefine DNNL_CPU_VE  ${DNNL_CPU_VE}
//#cmakedefine DNNL_CPU_SX  ${DNNL_CPU_SX} /* deprecated */
//@}

///@{ cpu_isa cmake options describe flavors of the cpu build
/// cmake strings tend to follow the DNNL_MAX_CPU_ISA cpu dispatch names.
/// however for cpp, these defines are simple integers.
///@{ all cpus support a few common settings.
#cmakedefine DNNL_ISA_VANILLA ${DNNL_ISA_VANILLA}
#cmakedefine DNNL_ISA_ANY     ${DNNL_ISA_ANY}  // least capable, maybe even same as vanilla
#cmakedefine DNNL_ISA_ALL     ${DNNL_ISA_ALL}  // pull out all the stops, all options allowed
///@}
///@{ x86 isa settings govern jit instruction set support
#cmakedefine DNNL_ISA_SSE41            ${DNNL_ISA_SSE41}
#cmakedefine DNNL_ISA_AVX              ${DNNL_ISA_AVX}
#cmakedefine DNNL_ISA_AVX2             ${DNNL_ISA_AVX2}
#cmakedefine DNNL_ISA_AVX512_MIC       ${DNNL_ISA_AVX512_MIC}
#cmakedefine DNNL_ISA_AVX512_MIC_4OPS  ${DNNL_ISA_AVX512_MIC_4OPS}
#cmakedefine DNNL_ISA_AVX512_CORE      ${DNNL_ISA_AVX512_CORE}
#cmakedefine DNNL_ISA_AVX512_CORE_VNNI ${DNNL_ISA_AVX512_CORE_VNNI}
#cmakedefine DNNL_ISA_AVX512_CORE_BF16 ${DNNL_ISA_AVX512_CORE_BF16}
///@}
///@{ ve isa settings govern jit instruction set support
#cmakedefine DNNL_ISA_VEDNN ${DNNL_ISA_VEDNN}
#cmakedefine DNNL_ISA_VEJIT ${DNNL_ISA_VEJIT}
///@}
///@}

/// @defgroup cmake_bool handy conditional tests for cmake build target
/// \note \ref cpu_target.h can these into shorter internal versions
//@{
#define DNNL_TARGET_VANILLA (DNNL_ISA == DNNL_ISA_VANILLA || DNNL_CPU == DNNL_CPU_VE/*to start debug*/)
// should be, someday, ...
//#define DNNL_TARGET_VANILLA (DNNL_ISA == DNNL_ISA_VANILLA || (DNNL_CPU == DNNL_CPU_VE && DNNL_ISA <= DNNL_ISA_ANY))

#define DNNL_TARGET_X86     (DNNL_CPU == DNNL_CPU_X86)
#define DNNL_TARGET_X86_JIT (DNNL_TARGET_X86 && DNNL_ISA >= DNNL_ISA_ANY && DNNL_ISA <= DNNL_ISA_ALL)

#define DNNL_TARGET_VE      (DNNL_CPU == DNNL_CPU_VE)
#define DNNL_TARGET_VEDNN   (DNNL_TARGET_VE && DNNL_ISA >= DNNL_ISA_VEDNN && DNNL_ISA <= DNNL_ISA_ALL)
#define DNNL_TARGET_VEJIT   (DNNL_TARGET_VE && DNNL_ISA >= DNNL_ISA_VEJIT && DNNL_ISA <= DNNL_ISA_ALL)

//#define DNNL_TARGET_SX // \deprecated
#if DNNL_TARGET_X86_JIT
//#warning "DNNL_TARGET_X86_JIT is TRUE"
#else
//#warning "DNNL_TARGET_X86_JIT is FALSE"
#endif
//@}

// clang-format on

#if DNNL_TARGET_X86 + DNNL_TARGET_VE == 0
#error "unknown target cpu.  no DNNL_TARGET_foo was set"
#endif
#if DNNL_TARGET_X86 + DNNL_TARGET_VE != 1
#error "cannot have more than one target cpu"
#endif

#if defined(DNNL_CPU_RUNTIME) && defined(DNNL_GPU_RUNTIME)
#if (DNNL_CPU_RUNTIME == DNNL_RUNTIME_NONE) \
        || (DNNL_CPU_RUNTIME == DNNL_RUNTIME_OCL)
#error "Unexpected DNNL_CPU_RUNTIME"
#endif
#if (DNNL_GPU_RUNTIME != DNNL_RUNTIME_NONE) \
        && (DNNL_GPU_RUNTIME != DNNL_RUNTIME_OCL)
#error "Unexpected DNNL_GPU_RUNTIME"
#endif
#else
#error "BOTH DNNL_CPU_RUNTIME and DNNL_GPU_RUNTIME must be defined"
#endif

// vim: et ts=4 sw=4 cindent cino=+2s,^=l0,\:0,N-s syntax=cpp.doxygen
#endif
