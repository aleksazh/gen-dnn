show_cmake_stuff("After default CXX compiler detection as Linux-GNU ...")
message(STATUS "Linux-GNU-CXX-aurora patches HERE : ${CMAKE_CURRENT_LIST_FILE}")
message(STATUS "  CMAKE_CXX_COMPILER              : ${CMAKE_CXX_COMPILER}")
message(STATUS "  CMAKE_CXX_COMPILER_ID           : ${CMAKE_CXX_COMPILER_ID}")


#nc++:   does not support -fvisibility= or -fvisibility-inlines-hidden
unset(CMAKE_CXX_COMPILE_OPTIONS_VISIBILITY)
unset(CMAKE_CXX_COMPILE_OPTIONS_VISIBILITY_INLINES_HIDDEN)

# -Os is not supported
set(CMAKE_CXX_FLAGS_RELEASE_INIT "${CMAKE_CXX_FLAGS_RELEASE_INIT} -mretain-list-vector")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "${CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT} -mretain-list-vector")
set(CMAKE_CXX_FLAGS_MINSIZEREL_INIT CMAKE_CXX_FLAGS_RELEASE_INIT)

# UnixPaths.cmake adds these host-only locations:
#  get_filename_component(_CMAKE_INSTALL_DIR ${_CMAKE_INSTALL_DIR} PATH )
#  list(APPEND CMAKE_SYSTEM_PREFIX_PATH /usr/local /usr / ${_CMAKE_INSTALL_DIR} )
#  if(NOT CMAKE_FIND_NO_INSTALL_PREFIX )
#  list(APPEND CMAKE_SYSTEM_PREFIX_PATH ${CMAKE_INSTALL_PREFIX} )
#  if(CMAKE_STAGING_PREFIX )
#  list(APPEND CMAKE_SYSTEM_PREFIX_PATH /usr/X11R6 /usr/pkg /opt )
#  list(APPEND CMAKE_SYSTEM_INCLUDE_PATH /usr/include/X11 )
#  list(APPEND CMAKE_SYSTEM_LIBRARY_PATH /usr/lib/X11 )
#  list(APPEND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES /lib /lib32 /lib64 /usr/lib /usr/lib32 /usr/lib64 )
#  list(APPEND CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES /usr/include )
#  list(APPEND CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES /usr/include )
#  list(APPEND CMAKE_CUDA_IMPLICIT_INCLUDE_DIRECTORIES /usr/include )
list(REMOVE_ITEM CMAKE_SYSTEM_PREFIX_PATH /usr/local /usr /usr/X11R6 /usr/pkg /opt)
unset(CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES) # /lib /lib32 /lib64 /usr/lib /usr/lib32 /usr/lib64
#list(REMOVE_ITEM CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES /usr/include)
#list(REMOVE_ITEM CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES /usr/include)
#list(REMOVE_ITEM CMAKE_CUDA_IMPLICIT_INCLUDE_DIRECTORIES /usr/include)
set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS FALSE)
set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS FALSE)
set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIBX32_PATHS FALSE)
# expose cross compiler system paths to cmake
# This is now run during ve.cmake (very early)
#DETERMINE_NCC_SYSTEM_INCLUDES_DIRS(${CMAKE_CXX_COMPILER} "-pthread" VE_CXX_SYSINC VE_CXX_PREINC)
message(STATUS "  C pre-inc dirs  : ${VE_CXX_PREINC}")
message(STATUS "  C sys-inc dirs  : ${VE_CXX_SYSINC}")
message(STATUS "  CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}")
list(INSERT CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES 0 "${VE_CXX_PREINC}")
message(STATUS "  CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}")
list(APPEND CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "${VE_CXX_SYSINC}")
message(STATUS "  CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}")
list(REMOVE_ITEM CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES /usr/include)
message(STATUS "  CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}")

# vim: et ts=4 sw=4 ai
