# this one is important
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR aurora)
set(NECVE 1 CACHE BOOL "Set thing up for NEC Aurora vector processor")

# specify the cross compiler
set(CMAKE_C_COMPILER   ncc)
set(CMAKE_CXX_COMPILER nc++)
set(CMAKE_SYSTEM_PREFIX_PATH /opt/nec/ve)     # a list of search paths
SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}" CACHE PATH "cmake additional Module/Platform path")
#set(CMAKE_CROSSCOMPILING ON)		# auto, if used as TOOCLCHAIN file
set(_CMAKE_TOOLCHAIN_PREFIX n)		# nar, nld, nFOO binaries
#set(CMAKE_C_COMPILER_INIT "Gnu")   # did not work (reduce compiler checks)

#set(CMAKE_C_COMPILER_ID "Aurora")
#set(CMAKE_C_SIMULATE_ID "GNU")
#set(CMAKE_CROSSCOMPILING_EMULATOR /opt/nec/ve/bin/ve_exec)
set(VE_EXEC ve_exec)
message(STATUS "VE_EXEC start off as ${VE_EXEC}")
find_program(CMAKE_CROSSCOMPILING_EMULATOR NAMES ve_exec PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
message(STATUS "find_program --> CMAKE_CROSSCOMPILING_EMULATOR = ${CMAKE_CROSSCOMPILING_EMULATOR}")
if(CMAKE_CROSSCOMPILING_EMULATOR)
    set(VE_EXEC ${CMAKE_CROSSCOMPILING_EMULATOR})
else()
    set(VE_EXEC echo ve_exec)
endif()
message(STATUS "VE_EXEC ends up as ${VE_EXEC}")

#set(CMAKE_C_FLAGS "-fdiag-vector=0" CACHE STRING "C flags")
#set(CMAKE_CXX_FLAGS "-fdiag-vector=0 -fdefer-inline-template-instantiation" CACHE STRING "C++ flags")

# where is the target environment 
#set(CMAKE_FIND_ROOT_PATH  /opt/nec/ve/musl)

# search for programs in the build host directories
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

############################## temporary

function(show_cmake_stuff MSG)
    message(STATUS "${MSG}")
    message(STATUS "    NECSX                           ${NECSX}")
    message(STATUS "    NECVE                           ${NECVE}")
    message(STATUS "    CMAKE_ROOT                      ${CMAKE_ROOT}")
    message(STATUS "    CMAKE_GENERATOR                 ${CMAKE_GENERATOR}")
    message(STATUS "    CMAKE_MODULE_PATH               ${CMAKE_MODULE_PATH}")
    message(STATUS "    ENV{CC}                         $ENV{CC}")
    message(STATUS "    ENV{CXX}                        $ENV{CXX}")
    message(STATUS "    CMAKE_C_LINKER_PREFERENCE C     ${CMAKE_C_LINKER_PREFERENCE}")
    message(STATUS "    CMAKE_CXX_LINKER_PREFERENCE C   ${CMAKE_CXX_LINKER_PREFERENCE}")
    message(STATUS "    CMAKE_TOOLCHAIN_FILE            ${CMAKE_TOOLCHAIN_FILE}")
    message(STATUS "    _CMAKE_TOOLCHAIN_PREFIX         ${_CMAKE_TOOLCHAIN_PREFIX}")
    message(STATUS "    CMAKE_CROSSCOMPILING            ${CMAKE_CROSSCOMPILING}")
    message(STATUS "    CMAKE_CROSSCOMPILING_EMULATOR   ${CMAKE_CROSSCOMPILING_EMULATOR}")
    message(STATUS " Platform/${CMAKE_SYSTEM_NAME}-${CMAKE_C_COMPILER_ID}-C-${CMAKE_SYSTEM_PROCESSOR}")
    message(STATUS "    -------------------------------")
    message(STATUS "    CMAKE_VERSION                   ${CMAKE_VERSION}")
    message(STATUS "    CMAKE_SYSTEM_NAME               ${CMAKE_SYSTEM_NAME}")
    message(STATUS "    CMAKE_UNIX                      ${CMAKE_UNIX}")
    message(STATUS "    CMAKE_C_COMPILER_ID             ${CMAKE_C_COMPILER_ID}")
    message(STATUS "    CMAKE_CXX_COMPILER_ID           ${CMAKE_CXX_COMPILER_ID}")
    message(STATUS "    CMAKE_COMPILER_IS_GNUCC         ${CMAKE_COMPILER_IS_GNUCC}")
    message(STATUS "    CMAKE_COMPILER_IS_GNUCXX        ${CMAKE_COMPILER_IS_GNUCXX}")
    message(STATUS "    CMAKE_C_COMPILER_VERSION        ${CMAKE_C_COMPILER_VERSION}")
    message(STATUS "    CMAKE_CXX_COMPILER_VERSION      ${CMAKE_CXX_COMPILER_VERSION}")
    message(STATUS "    -------------------------------")
    message(STATUS "    BUILD_SHARED_LIBS               ${BUILD_SHARED_LIBS}")
    message(STATUS "    CMAKE_AR                        ${CMAKE_AR}")
    message(STATUS "    CMAKE_MODULE_LINKER_FLAGS       ${CMAKE_MODULE_LINKER_FLAGS}")
    message(STATUS "    CMAKE_SHARED_LINKER_FLAGS       ${CMAKE_SHARED_LINKER_FLAGS}")
    message(STATUS "    CMAKE_EXE_LINKER_FLAGS          ${CMAKE_EXE_LINKER_FLAGS}")
    message(STATUS "    CMAKE_MODULE_LINKER_FLAGS       ${CMAKE_MODULE_LINKER_FLAGS}")
    message(STATUS "    CMAKE_SHARED_LINKER_FLAGS       ${CMAKE_SHARED_LINKER_FLAGS}")
    message(STATUS "    CMAKE_STATIC_LINKER_FLAGS       ${CMAKE_STATIC_LINKER_FLAGS}")
    message(STATUS "    CMAKE_SHARED_LIBRARY_C_FLAGS    ${CMAKE_SHARED_LIBRARY_C_FLAGS}")
    message(STATUS "    CMAKE_STATIC_LIBRARY_C_FLAGS    ${CMAKE_STATIC_LIBRARY_C_FLAGS}")
    message(STATUS "    CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS ${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS}")
    message(STATUS "    CMAKE_STATIC_LIBRARY_CREATE_C_FLAGS ${CMAKE_STATIC_LIBRARY_CREATE_C_FLAGS}")
    message(STATUS "    BUILD_STATIC_LIBS               ${BUILD_STATIC_LIBS}")
    message(STATUS "    -------------------------------")
    message(STATUS "    CMAKE_C_COMPILER                     ${CMAKE_C_COMPILER}")
    message(STATUS "    CMAKE_C_OUTPUT_EXTENSION             ${CMAKE_C_OUTPUT_EXTENSION}")
    message(STATUS "    CMAKE_C_FLAGS                        ${CMAKE_C_FLAGS}")
    message(STATUS "    CMAKE_C_FLAGS_RELEASE                ${CMAKE_C_FLAGS_RELEASE}")
    message(STATUS "    CMAKE_C_FLAGS_DEBUG                  ${CMAKE_C_FLAGS_DEBUG}")
    message(STATUS "    CMAKE_C_COMPILE_OBJECT               ${CMAKE_C_COMPILE_OBJECT}")
    message(STATUS "    CMAKE_C_LINK_EXECUTABLE              ${CMAKE_C_LINK_EXECUTABLE}")
    message(STATUS "    CMAKE_C_CREATE_SHARED_LIBRARY        ${CMAKE_C_CREATE_SHARED_LIBRARY}")
    message(STATUS "    CMAKE_C_CREATE_STATIC_LIBRARY        ${CMAKE_C_CREATE_STATIC_LIBRARY}")
    message(STATUS "    CMAKE_C_CREATE_PREPROCESSED_SOURCE   ${CMAKE_C_CREATE_PREPROCESSED_SOURCE}")
    message(STATUS "    CMAKE_C_CREATE_ASSEMBLY_SOURCE       ${CMAKE_C_CREATE_ASSEMBLY_SOURCE}")
    message(STATUS "    CMAKE_SHARED_CXX_LINK_FLAGS          ${CMAKE_C_LINK_FLAGS}")
    message(STATUS "    -------------------------------")
    message(STATUS "    CMAKE_CXX_COMPILER                   ${CMAKE_CXX_COMPILER}")
    message(STATUS "    CMAKE_C_OUTPUT_EXTENSION             ${CMAKE_CXX_OUTPUT_EXTENSION}")
    message(STATUS "    CMAKE_CXX_FLAGS                      ${CMAKE_CXX_FLAGS}")
    message(STATUS "    CMAKE_CXX_LINK_FLAGS                 ${CMAKE_CXX_LINK_FLAGS}")
    message(STATUS "    CMAKE_CXX_FLAGS_RELEASE              ${CMAKE_CXX_FLAGS_RELEASE}")
    message(STATUS "    CMAKE_CXX_FLAGS_DEBUG                ${CMAKE_CXX_FLAGS_DEBUG}")
    message(STATUS "    CMAKE_CXX_COMPILE_OBJECT             ${CMAKE_CXX_COMPILE_OBJECT}")
    message(STATUS "    CMAKE_CXX_LINK_EXECUTABLE            ${CMAKE_CXX_LINK_EXECUTABLE}")
    message(STATUS "    CMAKE_CXX_CREATE_SHARED_LIBRARY      ${CMAKE_CXX_CREATE_SHARED_LIBRARY}")
    message(STATUS "    CMAKE_CXX_CREATE_STATIC_LIBRARY      ${CMAKE_CXX_CREATE_STATIC_LIBRARY}")
    message(STATUS "    CMAKE_CXX_CREATE_PREPROCESSED_SOURCE ${CMAKE_CXX_CREATE_PREPROCESSED_SOURCE}")
    message(STATUS "    CMAKE_CXX_CREATE_ASSEMBLY_SOURCE     ${CMAKE_CXX_CREATE_ASSEMBLY_SOURCE}")
    message(STATUS "    -------------------------------")
endfunction()
# vim: et ts=4 sw=4 ai
