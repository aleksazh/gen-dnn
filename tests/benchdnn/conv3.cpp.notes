static void refconv_3_bwd_d_generic(const prb_t *p, dnn_mem_t &diff_src_m,
        dnn_mem_t &wei_m, dnn_mem_t &diff_dst_m)
{
  const int lcm_w = lcm( p->sw, p->dw+1 );
  const int lcm_h = lcm( p->sh, p->dh+1 );
  const int DH = p->dh+1;
  const int SH = p->sh;
  const int PH = p->ph;
  const int OH = p->oh;
  const int DW = p->dw+1;
  const int SW = p->sw;
  const int PW = p->pw;
  const int OW = p->ow;
  //int const khh = SH; // only for DH==1 !!!
  int const khh = 1; // safe (if check conditions)
  int const kww = 1; // safe (if check conditions)
  //int const khh = lcm_h / SH;
  //int const kww = lcm_w / PW;
#   pragma omp parallel for collapse(4)
  for (int g = 0; g < p->g; ++g) {
    for (int mb = 0; mb < p->mb; ++mb) {
      for (int ic = 0; ic < p->ic/p->g; ++ic) {
        for (int ih = 0; ih < p->ih; ++ih) {
          int kh_beg, kh_end;
          hoist_AmiB_in( kh_beg, kh_end,
              /*kh  in   */ 0, p->kh,
              /*oh=A+khB */ (ih + PH), DH,
              /*oh in   */ 0, OH*SH );
          { // jump kh_beg up to 1st non-skipped index
            // 
            int ohsh = ih+PH - kh_beg * DH; // must always be a mult of SH
            int rem_beg = ohsh % SH;
            if (rem_beg){
              // maybe I need a custom hoister here... the following is hard to patch
              do {
                ++kh_beg;
                ohsh = ih+PH - kh_beg * DH;
              } while( ohsh % SH != 0 && kh_beg < kh_end );
            }
            int oh_beg = ohsh / SH;
          }
          //
	  // problem: Find the lowest khb >= kh_beg such that
          //          osh = ih+PH - khb*DH
          //      AND osh % SH == 0.
          //          Then oh_beg = osh / SH;
          //
          // Alt: Let osh0 = (ih+PH - khb0 * DH)
          //      and ohb0 = osh/SH.
          //      Find the highest osh <= osh0 such that
          //      osh % SH == 0
          //  AND (ih+PH - osh) % DH = 0.
          //      Then kh_beg = (ih+PH - osh) / DH
          //       and oh_beg = osh / SH;
          //

          for (int iw = 0; iw < p->iw; ++iw) {
            int kw_beg, kw_end;
            hoist_AmiB_in( kw_beg, kw_end,
                /*i  in   */ 0, p->kw,
                /*ow=A+iB */ (iw + PW), DW,
                /*ow in   */ 0, OW*SW );
            { // jump kw_beg up to 1st non-skipped index
              int owsw = iw+PW - kw_beg * DW;
              int rem_beg = owsw % SW;
              if (rem_beg){
                do {
                  ++kw_beg;
                  owsw = iw+PW - kw_beg * DW;
                } while( owsw % SW != 0 && kw_beg < kw_end );
                //print(0, " ... kw_beg --> %d, ow_beg --> %d\n", kw_beg, ow_beg);
                DMUST( (kw_beg >= kw_end || (iw+PW - kw_beg * DW) % SW == 0) );
                int ow_beg = owsw / SW;
              }
            }
            size_t src_off = src_off_f(p, mb, g, ic, ih, iw);
            float &ds = ((float*)diff_src_m)[src_off];
            ds = 0;
            if( TRIVIAL(kh_beg >= kh_end || kw_beg >= kw_end) ){
              ; //DPRINTF("t");
            } else {
              //
              // 3 nested loops, with NO conditional tests
              //
              //DPRINTF(".");
              //bool const s0 = kh_beg >= kh_end || SH <= 1; // this IMPLIES skips remains 0
              // next: loop over allowed oh values, THEN over kh
              for (int kh = kh_beg; kh < kh_end; kh += khh) {
                int oh0 = ih+PH - kh * DH ; // loop vars: kh, ih
                if( oh0<0 || oh0%SH ) continue;
                int oh = oh0 / SH;
                ///const int oh = (ih+PH - kh * DH) / SH;

                for (int kw = kw_beg; kw < kw_end; kw += kww) {
                  int ow0 = iw+PW - kw * DW; // loop vars: iw, kw
                  if ( ow0<0 || ow0%SW ) continue;
                  int ow = ow0 / SW;
                  ///const int ow = (iw+PW - kw * DW) / SW;

                  for (int oc = 0; oc < p->oc/p->g; ++oc) {
                    size_t dst_off = dst_off_f(p, mb, g, oc, oh, ow);
                    size_t wei_off = wei_off_f(p, g, oc, ic, kh, kw);
                    ds += ((float*)diff_dst_m)[dst_off]
                      * ((float*)wei_m)[wei_off];
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

